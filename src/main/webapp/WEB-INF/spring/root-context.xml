<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.mariadb.jdbc.Driver" />
		<property name="url" value="jdbc:mariadb://localhost:3300/solve" />
		<property name="username" value="root" />
		<property name="password" value="1234" />
	</bean>
	
	<!-- value는 값을 지정 ref는 이미 지정한 값을 가져오는 것 -->

	<bean id="SqlSessionFectory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:/mappers/*Mapper.xml" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="SqlSessionFectory" />
	</bean> 
	
	
	<!-- 쿼터즈 -->
	<context:component-scan base-package="solve.co.kr"></context:component-scan>
	
	<!-- 스케줄을 위한 bean 처리 id는 임의 설정으로 지정 : 인터페이스는 지정안됨.. class임 -->
	<bean id="regService" class="solve.co.kr.reg.RegServiceImpl" />
	
	<!-- 잡등록 -->
	<bean name="RegBatch" class="org.springframework.scheduling.quartz.JobDetailFactoryBean"><!-- Quartz 2.x 버전 -->
		<property name="jobClass" value="solve.co.kr.batch.RegBatch"/>
		
		<!-- 서비스등록 -->
		<property name="jobDataAsMap">
            <map>
                <entry key="rs" value-ref="regService"></entry>
                <!-- Inject /Autowired 가 되지 않아서 강제로 주입해야 한다. --> 
            </map>
        </property>
	</bean>

	<!-- 크론 등록 -->
	<bean id="cronTrigger1" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
	   	<property name="jobDetail" ref="RegBatch" />
	   	<property name="cronExpression" value="0 0/1 * 1/1 * ? *"/> <!-- 1분 -->  
   	 	<!-- <property name="cronExpression" value="0 0 0/1 1/1 * ? *"/> --> <!-- 매시간 -->  
 	</bean> 
 	
 	
	<!-- 여기서 추가 함 2번째 -->
	<bean name="SolBatch" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="solve.co.kr.batch.SolBatch"/>
		<property name="jobDataAsMap">
            <map>
                <entry key="rs" value-ref="regService"></entry>
            </map>
        </property>
	</bean>

	<bean id="cronTrigger2" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
	   	<property name="jobDetail" ref="SolBatch" />  
   	 	<property name="cronExpression" value="0 0/1 * 1/1 * ? *"/>
   	 	<!-- 0 0 0 1/1 * ? * --> <!-- 매일 00시 -->
 	</bean>
	
		
	 <!-- 스케줄러 등록 -->
 	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	  <property name="triggers">
	    <list>
	      <ref bean="cronTrigger1" />
	      <ref bean="cronTrigger2" />
	    </list>
	  </property>
	</bean>
	
	
		
</beans>
